The purpose of this lab is to redesign the code of Xv6 memory allocator to increase parallelism. The current implementation 
of memory allocator has poor parallelism due to high lock contention between the different cores.

The root cause of lock contention in the memory allocator is that. The allocator maintains only a single free list which is 
shared by all the cores and protected by a single lock. To reduce the lock contention each CPU is given its own free list 
with its own lock. Which allows the allocations and freeing on different CPUs to run in parallel. If a CPU runs out of pages 
in its free list and some other CPU has free pages with them, the CPU without pages would then need to steal pages from CPU 
which has free pages. This stealing may introduce lock contention, but frequency will be less. Initially all the pages are 
given to the CPU which initializes the free list. After that other CPUs steal from it on demand.
